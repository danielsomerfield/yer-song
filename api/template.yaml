AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  API for Yer-Song App

Parameters:
  DynamoDbEndpoint:
    Description: The url prefix requests to the song api
    Type: String
    Default: http://host.docker.internal:4566
  AllowOrigin:
    Description: The origin the server allows for CORS purposes
    Type: String
    Default: "http://localhost:3001"
  AuthzSecret:
    Description: Configuration for the token validation
    Type: String

Globals:
  Function:
    Timeout: 10
    Architectures:
      - x86_64
    Runtime: nodejs18.x
    CodeUri: songs/
    Environment:
      Variables:
        API_ENDPOINT: !Ref DynamoDbEndpoint
        ALLOW_ORIGIN: !Ref AllowOrigin
        AUTHZ_SECRET: !Ref AuthzSecret

Resources:
  SongByIdAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: "Prod"
      Cors:
        AllowMethods: "'GET,OPTIONS,POST'"
        AllowOrigin: !Sub "'${AllowOrigin}'"
        AllowHeaders: "'Content-Type, x-token'"

  TagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.getTags
      Events:
        Song:
          Type: Api
          Properties:
            Path: /tagName/{name}/tags
            Method: get
            RestApiId: !Ref SongByIdAPI
      Policies: AWSLambdaDynamoDBExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
    Connectors:
      ReadFromSongs:
        Properties:
          Destination:
            Id: SongTable
          Permissions:
            - Read
  SongByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.getSong
      Events:
        Song:
          Type: Api
          Properties:
            Path: /songs/{id}
            Method: get
            RestApiId: !Ref SongByIdAPI
      Policies: AWSLambdaDynamoDBExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
    Connectors:
      ReadFromSongs:
        Properties:
          Destination:
            Id: SongTable
          Permissions:
            - Read

  SongsByTagIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.getSongsByTagId
      Events:
        Song:
          Type: Api
          Properties:
            Path: /tags/{tagId}/songs
            Method: get
            RestApiId: !Ref SongByIdAPI
      Policies: AWSLambdaDynamoDBExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
    Connectors:
      ReadFromSongs:
        Properties:
          Destination:
            Id: SongTable
          Permissions:
            - Read


  PlaylistFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.getPlaylist
      Events:
        Song:
          Type: Api
          Properties:
            Path: /playlist
            Method: get
            RestApiId: !Ref SongByIdAPI
      Policies: AWSLambdaDynamoDBExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
    Connectors:
      ReadFromSongs:
        Properties:
          Destination:
            Id: SongTable
          Permissions:
            - Read

  VoteForSongFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.voteForSong
      Events:
        Song:
          Type: Api
          Properties:
            Path: /vote/songs/{songId}
            Method: post
            RestApiId: !Ref SongByIdAPI
      Policies: AWSLambdaDynamoDBExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
    Connectors:
      ReadFromSongs:
        Properties:
          Destination:
            Id: SongTable
          Permissions:
            - Read
            - Write

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.registerUser
      Events:
        Song:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref SongByIdAPI
      Policies: AWSLambdaDynamoDBExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
    Connectors:
      ReadFromSongs:
        Properties:
          Destination:
            Id: SongTable
          Permissions:
            - Read
            - Write

  # Dependencies
# TODO: I can't find any bloody way to prevent having to build this other than not use
#   any of the Connectors and generate the policy by hand. Lame. Nor can I find a way to include
#   an external definition.
  SongTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: song
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 100
          WriteCapacityUnits: 100
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 25
              WriteCapacityUnits: 25
          - IndexName: GSI2
            KeySchema:
              - AttributeName: GSI2PK
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 25
              WriteCapacityUnits: 25

Outputs:
  SongByIdAPI:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${SongByIdAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  SongByIdFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt SongByIdFunction.Arn
  SongByIdFunctionFunctionIamRole:
    Description: "Implicit IAM Role"
    Value: !GetAtt SongByIdFunctionRole.Arn
  TagsFunctionFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt TagsFunction.Arn
  TagsFunctionFunctionIamRole:
    Description: "Implicit IAM Role"
    Value: !GetAtt TagsFunctionRole.Arn
  SongsByTagIdFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt SongsByTagIdFunction.Arn
  SongsByTagIdFunctionIamRole:
    Description: "Implicit IAM Role"
    Value: !GetAtt SongsByTagIdFunctionRole.Arn
  PlaylistFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt PlaylistFunction.Arn
  PlaylistFunctionIamRole:
    Description: "Implicit IAM Role"
    Value: !GetAtt PlaylistFunctionRole.Arn
  VoteForSongFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt VoteForSongFunction.Arn
  VoteForSongFunctionIamRole:
    Description: "Implicit IAM Role"
    Value: !GetAtt VoteForSongFunctionRole.Arn
  RegisterUserFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt RegisterUserFunction.Arn
  RegisterUserFunctionIamRole:
    Description: "Implicit IAM Role"
    Value: !GetAtt RegisterUserFunctionRole.Arn
